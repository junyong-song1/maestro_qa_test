# Project Structure Guide (최신 QA 자동화 구조)

## 📁 Core Structure

### scripts/config/
- **config_manager.py**: 설정 관리 싱글톤, TestRail/App 설정 통합

### scripts/core/
- **application.py**: QAApplication 메인 클래스, 전체 워크플로우 오케스트레이션
- **test_runner.py**: MaestroTestRunner(테스트 실행), TestResult(결과 데이터)
- **main.py**: 단일 진입점
- **testrail_maestro_runner.py**: 레거시 코드(점진적 마이그레이션)

### scripts/device/
- **device_manager.py**: DeviceInfo(데이터), 디바이스 관리/ADB/환경 체크

### scripts/testrail/
- **testrail.py**: TestRail API 유틸리티(런 생성, 케이스 조회, 결과 업로드)

### scripts/utils/
- **logger.py**: 구조화/색상 지원 로깅, TestLogger
- **maestro_runner.py**: Maestro 실행 유틸리티
- **기타**: 정리, 로그, 디바이스 유틸리티 등

## 📁 Configuration & Data

### config/
- **config.ini**: 실제 환경설정(민감정보, git 제외)
- **config.ini.example**: 예시

### maestro_flows/
- **TC*.yaml**: Maestro 테스트 플로우 (파일명 기반 매칭)
- **sub_flows/**: 공통 플로우

### artifacts/
- **logs/**: 단말기별 로그
- **result/**: 테스트 결과/첨부파일

## 🚀 Execution Flow (실제 동작)

1. **main.py** → **QAApplication.run()**
2. **DeviceManager.discover_devices()** → 디바이스 탐색
3. **TestRail API**로 suite_id, custom_automation_type(2: Maestro) 필터링 케이스 조회
4. **MaestroTestRunner.run_tests()**: 파일명(`TC{case_id}_`) 기반 YAML 매칭, 테스트 실행
5. **TestRail API**로 결과(run_id, status_id 등) 자동 업로드

## 🔑 Key Features (실제 구현 반영)
- **파일명 기반 YAML 매칭**: `TC{case_id}_` 패턴만 맞으면 YAML 내용 수정 없이 실행
- **TestRail 연동**: suite_id, custom_automation_type(2) 필터, 결과 자동 업로드
- **API 규격 준수**: run_id, status_id 등 TestRail 규격 엄수
- **main.py 단일 진입점, 실행 로그 상세 기록**
- **현업 QA 자동화 요구 100% 반영**

## 🛠 개발 가이드
- 새 기능은 클래스 기반 구조로 추가
- 설정은 ConfigManager로만 접근
- 로깅은 TestLogger 사용
- 타입 힌트, 예외 처리, 일관된 구조 유지
description:
globs:
alwaysApply: false
---
